import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
import * as ADD from '@redis/bloom/dist/commands/t-digest/ADD';
import * as BYRANK from '@redis/bloom/dist/commands/t-digest/BYRANK';
import * as BYREVRANK from '@redis/bloom/dist/commands/t-digest/BYREVRANK';
import * as CDF from '@redis/bloom/dist/commands/t-digest/CDF';
import * as CREATE from '@redis/bloom/dist/commands/t-digest/CREATE';
import * as INFO from '@redis/bloom/dist/commands/t-digest/INFO';
import * as MAX from '@redis/bloom/dist/commands/t-digest/MAX';
import * as MERGE from '@redis/bloom/dist/commands/t-digest/MERGE';
import * as MIN from '@redis/bloom/dist/commands/t-digest/MIN';
import * as QUANTILE from '@redis/bloom/dist/commands/t-digest/QUANTILE';
import * as RANK from '@redis/bloom/dist/commands/t-digest/RANK';
import * as RESET from '@redis/bloom/dist/commands/t-digest/RESET';
import * as REVRANK from '@redis/bloom/dist/commands/t-digest/REVRANK';
import * as TRIMMED_MEAN from '@redis/bloom/dist/commands/t-digest/TRIMMED_MEAN';
declare const _default: {
    ADD: typeof ADD;
    add: typeof ADD;
    BYRANK: typeof BYRANK;
    byRank: typeof BYRANK;
    BYREVRANK: typeof BYREVRANK;
    byRevRank: typeof BYREVRANK;
    CDF: typeof CDF;
    cdf: typeof CDF;
    CREATE: typeof CREATE;
    create: typeof CREATE;
    INFO: typeof INFO;
    info: typeof INFO;
    MAX: typeof MAX;
    max: typeof MAX;
    MERGE: typeof MERGE;
    merge: typeof MERGE;
    MIN: typeof MIN;
    min: typeof MIN;
    QUANTILE: typeof QUANTILE;
    quantile: typeof QUANTILE;
    RANK: typeof RANK;
    rank: typeof RANK;
    RESET: typeof RESET;
    reset: typeof RESET;
    REVRANK: typeof REVRANK;
    revRank: typeof REVRANK;
    TRIMMED_MEAN: typeof TRIMMED_MEAN;
    trimmedMean: typeof TRIMMED_MEAN;
};
export default _default;
export interface CompressionOption {
    COMPRESSION?: number;
}
export declare function pushCompressionArgument(args: RedisCommandArguments, options?: CompressionOption): RedisCommandArguments;
export declare function transformDoubleReply(reply: string): number;
export declare function transformDoublesReply(reply: Array<string>): Array<number>;
